// name 100
// num 200
#include <stdlib.h>
#include <iostream>
#include <vector>
#include <string>
using namespace std;
typedef pair<string , int> pll;
string key_word[] = {"main" , "int" , "char" , "if" , "else" , "for" , "while" ,"continue" , "do" , "break" , "flaot" 
,"doubel" , "long long" , "double" , "true" , "false" , "bool" , "printf" , "scanf" , "return" , "case" , "switch" , "default" ,
"struct" , "static"};

string symbol[] = {"=" , "+" , "-" , "*" , "/" , "(" , ")" , "[" , "]" , "{" , "}" , "," , ":" , ";" , ">" , "<" ,
">=" , "<=" , "==" , "!=" , "&" , "&&" , "|" , "||" , "!" , "\""};
vector<pll> res;
char last;

struct Node{
	int val;
	Node * son[255];
	Node(){val = -1 ; for(int i = 0 ; i < 255 ; i ++) son[i] = NULL;}
}*root;

void insert(string s , int x)
{
	auto p = root;
	
	for(auto c : s)
	{
		if(p -> son[c] == NULL)
		{
			p -> son[c] = new Node();
		}
		p = p -> son[c];
	}
	p -> val = x;
	
}

int query(string s)
{
	auto p = root;
	for(auto c : s)
	{
		if(p -> son[c] == NULL) return -1;
	    p = p -> son[c];
	}
	
	return p -> val;
}

bool isdigit(char c)
{
	if(c >= '0' && c <= '9') return true;
	return false;
}

bool isletter(char c)
{
	if((c >= 'a' && c <= 'z' ) || (c >= 'A' && c <= 'Z')) return true;
	return false;
}

char scaner()
{
	char c;
	
	if(scanf("%c" , &c) != EOF) return c; 
	
	return '$';
}

bool is2(char c)
{
	for(int i = 0 ; i < 26 ; i ++) 
	if(c == symbol[i][0]) return true;
	return false;
}

int solve()
{
	char c;
	
	if(last == '$') c = scaner();
	else c = last;

	while(c == ' ' || c == '\n') c = scaner();
	
	if(c == '$') return 1;
	
	if(isdigit(c))
	{
		string cur;
		cur.push_back(c);
		c = scaner();
		while(isdigit(c)) 
		{
		  cur.push_back(c);
		  c = scaner();	
		}	
		res.push_back({cur , 200});
		last = c;
	}
	else if(isletter(c))
	{

		string cur;
		cur.push_back(c);
		c = scaner();
		while(isletter(c))
		{
			cur.push_back(c);
			c = scaner();
		}

		int val = query(cur);
		
		if(val == -1) res.push_back({cur , 100});
		else res.push_back({cur , val});
		
		last = c;
		if(last == '$') return 1;
	}
	else if(is2(c))
	{
		string cur;
		cur.push_back(c);
	
		c = scaner();
	
		if(is2(c))
		{
			cur.push_back(c);
			int val = query(cur);
			if(val != -1) res.push_back({cur , val});
			else
			{
				string a , b;
				a.push_back(cur[0]);
				b.push_back(cur[1]);
				res.push_back({a , query(a)});
				res.push_back({b , query(b)});
			}
			c = scaner();
		}
		else res.push_back({cur , query(cur)});
		
		last = c;
		if(last == '$') return 1;
	}
	else 
	{   
		return -1;
	}
	
	return 0;
}



void init()
{
	root = new Node();
	for(int i = 0 ; i < 25 ; i ++)
	insert(key_word[i] , i + 1);
	
	for(int i = 0 ; i < 26 ; i ++)
	insert(symbol[i] , 101 + i );
		
}

int main()
{
	char in[10] , out[10];
	cout << "输入源文件名 : ";
	scanf("%s" , in);
	cout << "输入输出文件名 :";
	scanf("%s" , out);
	
	init();
	
	freopen(in , "r" , stdin);
	freopen(out , "w" , stdout);
	
	last = '$' ;
	int cout;
	while(1)	
	{
		int now = solve();
		
		if(now == -1)
		{
			 cout << "error" << endl;
			 break;
		}
	    else if(now == 1) break; 
	}

	for(auto t : res) cout <<"( "<< t.second << " , " << t.first << " )"<<endl;
	
	return 0;
}
