#include <iostream>
#include <cstring>
#include <vector> 
#include <stack>
#include <set>
#include <map>
using namespace std;
typedef pair<string , int > pll;

vector<string> inputstring;
set<string> vn , vt;
map<string , vector<string> > yufa;
map<string , set<char> > first , follow;
set<char> temfirst;
map<string , map<string,string> >f;

bool ischar(char c)
{
	if( (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '\'') return true;
	return false;
}

pll get(string s , int j)
{
	string cur;
	cur.push_back(s[j]); j ++;
	while(j < s.size() && ischar(s[j]))
	{
		cur.push_back(s[j ++]);
		if(vn.find(cur) != vn.end() && j < s.size() && s[j] != '\'') break;
	}
	j --;
	
	return {cur , j};
}

void getvnvt()
{
	string s;
	
	while(cin >> s) inputstring.push_back(s);

	for(auto s : inputstring)
	{					
		string cur;	
		for(int i = 0 ; i < s.size() ; i ++)
			if(s[i] != '-') cur.push_back(s[i]);
			else 
			{
				yufa[cur].push_back(s.substr(i + 2));
				break;
			}
		vn.insert(cur);	
	}
 	
 	for(auto s : inputstring)
 	{
 		int i = 0;
 		while(s[i] != '-') i ++;
 		i ++; i ++;
 		string cur;
 		while(i < s.size())
 		{
 			if(ischar(s[i]) || s[i] == ' ') 
			{   i ++;
			 	continue;
			}
 			else 
 			{
 				cur.push_back(s[i ++]);
				vt.insert(cur); 
				cur.clear();	
			}
		}
	}
}

void getfirst()
{
	bool ischange = true;
	
	while(ischange)
	{
		ischange = false;
		for(auto i : vn){
			for(auto s : yufa[i]){
				bool havenull = false;
				for(int j = 0 ; j < s.size() ; j ++){
					char c = s[j];
					string ts; ts.push_back(c);
					if(vt.find(ts) != vt.end()){
							if(!first[i].count(c))
							{
								first[i].insert(c);
								ischange = true;
								havenull = false;
							}
					}
					else
					{
						string cur;
						cur.push_back(c); j ++ ;
						while(j < s.size() && ischar(s[j]))
						{
							cur.push_back(s[j ++]);
							if(vn.find(cur) != vn.end() && j < s.size() && s[j] != '\'') break;
						}
						j --;
					
						for(auto k : first[cur])
						{
							if(k != '$'){
								if(!first[i].count(k)){
								first[i].insert(k);
								ischange = true;
								}
								if(first[i].count('$') == 0) havenull = false; 
							}
							else havenull = true;
						}
					
					}
					if(!havenull) break; 
				}
				if(havenull && !first[i].count('$') )
				{
					first[i].insert('$');
					ischange = true;
				}
			}
		}
	}
	
	for(auto s : vt){
		char c = s[0];
		first[s].insert(c); 
	}
	cout << "first" << endl;
	for(auto c : first){
		string s = c.first;
		auto a = c.second;
		cout << s << " -- ";
		for(auto x : a) cout << x << " ";
		cout << endl;
	}
		
}

string gettemfirst(string s , int j)
{	
	temfirst.clear();
	if(j >= s.size()) return "";
 	string tem; tem.push_back(s[j]);
	
	if(vt.find(tem) != vt.end()) 
	{
		temfirst = first[tem];
		return tem;
	}
	else
	{
		string cur = get(s , j).first;
		temfirst = first[cur];
		return cur;
	}
	
}

void getfollow()
{
	string st;
	for(auto c : inputstring[0]) 
		if(c != '-') st.push_back(c);
		else break;
	follow[st].insert('#');	
	
	bool ischange = true;
	
	while(ischange)
	{
		ischange = false;
		
		for(auto i : vn)
		{
		//	cout << "vn -- "<< i << " " << endl;
			for(auto s : yufa[i])
			{	//cout << s << endl;
				for(int j = 0 ; j < s.size() ; j ++)
				{
					string tem; tem.push_back(s[j]);
					if(vt.find(tem) != vt.end()) continue;
					else
					{
						pll t = get(s , j);	
						string cur = t.first;
					//	cout <<"&&&& "<< cur << endl;
						j = t.second;
						string ne = gettemfirst(s , j + 1);
					//	cout << "### " << ne << " " << temfirst.size() << endl;
						bool havenull = false;
						if(temfirst.size())
						{
							for(auto c : temfirst) 
								if(!follow[cur].count(c) && c != '$')
								{
									follow[cur].insert(c);
									ischange = true;
								}
								else if(c == '$') havenull = true;
						}
					//	if(havenull) cout << "asdasdasd" << endl;
						if(ne == "" || havenull)
						{
							for(auto c : follow[i])	
								if(!follow[cur].count(c))
								{
									follow[cur].insert(c);
								//	if(cur=="factor" && c == ')') cout << "----adsadasdasd- " << i << endl; 
									ischange = true;
								}
						} 
						
					}
				}
			}
			//break;
		}
		
	}
	cout << " ----------------------  -------------------------- " << endl;
	cout << "follow " << endl;
	for(auto s : follow)
	{
		cout << s.first << " --- ";
		for(auto x : s.second) cout << x << " ";
		cout << endl;
	}
	
}

void gettable()
{
	for(auto a : vn){
		for(auto b : vt)
		f[a][b] = "error";
	}
	
	for(auto a : vn) f[a]["#"] = "error";
	// #  , $ , ( ,  ) , *  +  0
	cout << "            #" << "       " << "$      " << "(        " << ")         " << "*     " << "+    " << " 0 " << endl;    
	for(auto i : vn){
		for(auto s : yufa[i])
		{
			gettemfirst(s , 0);
			for(auto j : temfirst)
			{
				string cur; cur.push_back(j);
				f[i][cur] = s;
				if(temfirst.find('$') != temfirst.end())
				{
					for(auto x : follow[i]){
						string t; t.push_back(x);
						f[i][t] = s;
					}
				}
			}
		}
	}
	
	cout << "----------- Table ------------------" << endl;
	
	for(auto i : f){
		cout << i.first << " -- ";
		for(auto j : i.second) cout << j.second << " ";
		cout << endl;
	}
	
}


int getans()
{
	stack<string> stk;
	stk.push("#");
	string st;
	for(auto c : inputstring[0]) 
	   if(c != '-')st.push_back(c);
	   else break;
	stk.push(st);
	
	string in;
	cout << "--------" << endl;
	char c;
	cin >> c;
	cout << c << endl;
	in.push_back(c);
	
	cout << in << endl;
	
	while(stk.size())
	{
		string x = stk.top();
		if(vt.find(x) != vt.end())
		{
			if(x == in)
			{
				cout << "date  " << in << endl; 
				cin >> c;in.clear(); in.push_back(c); stk.pop();
			}
			else return -1;
		}
		else if(x == "#")
		{
			if(x == in) break;
			else return -1;
		}
		else
		{
			string cur = f[x][in];
			if(cur == "error") return -1;
			else
			{
				cout << x << " -> " << cur << endl;
 				stk.pop();
				int n = cur.size();
				vector<string> tem;
				for(int i = 0 ; i < n ; i ++)
				{
					if(ischar(cur[i]) || cur[i] == '\'')
					{
						string res; res.push_back(cur[i]);
						i ++;
						while(i < n && (ischar(cur[i]) || cur[i] == '\'')) res.push_back(cur[i ++]);
						i --;
						tem.push_back(res);
					}
					else
					{
						string res;
						res.push_back(cur[i]);
					}
				}
				
				for(int i = tem.size() ; i >= 0 ; i --)
				if(tem[i] != "$") stk.push(tem[i]);
			}
		}
	}
	cout << "YES" << endl;
}

int main()
{
	freopen("1.txt" , "r" , stdin);
	getvnvt();	
	getfirst();	
	getfollow();
	gettable();
	freopen("2.txt" , "r" , stdin);
	getans();
		
	return 0;
} 

prgm->expr;prgm'
prgm->prgm
prgm->$
expr->termexpr'
expr'->+termexpr'
expr'->$
term->factorterm'
term'->*factorterm'
term'->$
factor->(expr)
factor->1
factor->2
